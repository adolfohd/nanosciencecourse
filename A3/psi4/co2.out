    -----------------------------------------------------------------------
          Psi4: An Open-Source Ab Initio Electronic Structure Package
                              Psi4 1.0.0 Driver

                          Git: Rev {master} 6a9a71b 

    J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein,
    F. A. Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke,
    M. L. Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl,
    W. D. Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill,
    and T. D. Crawford, WIREs Comput. Mol. Sci. 2, 556-565 (2012)
    (doi: 10.1002/wcms.93)

                         Additional Contributions by
    A. E. DePrince, U. Bozkaya, A. Yu. Sokolov, D. G. A. Smith, R. Di Remigio,
    R. M. Richard, J. F. Gonthier, H. R. McAlexander, M. Saitow, and
    B. P. Pritchard
    -----------------------------------------------------------------------


    Psi4 started on: Mon Jan 30 18:44:49 2017

    Process ID:  12000
    PSI4DATADIR: /Users/equipo/miniconda/share/psi4
    Memory level set to 256.000 MB

  ==> Input File <==

--------------------------------------------------------------------------
import math
from angle import angle, dotproduct, length
import numpy
memory 250 mb

molecule co2 {
  C 
  O 1 1.19
  O 1 1.20 2 A
}

Avals = numpy.asarray(range(11,18))*10

set basis cc-pVDZ
for A in Avals:
  if A != 90 and A != 130:
    co2.A = A
    co2.update_geometry() 
    print "\n\nInitial geometry for A = ", A, " := \n" , mat2arr(co2.geometry()), "\n\n"
    op, wfn = optimize('hf', return_wfn=True, molecule=co2)
    if A == 120:
        molden(wfn, "op.molden", density_a=wfn.Da())

    geo = mat2arr(co2.geometry())
    print "Optimized geometry := \n" , geo, "\n\n"

    c_pos = numpy.asarray(geo[0])
    print "position of carbon atom := ", c_pos  
    o1_pos = numpy.asarray(geo[1])
    print "position of first oxygen atom := ", o1_pos  
    o2_pos = numpy.asarray(geo[2])
    print "position of second oxygen atom := ", o2_pos  

    u = c_pos - o1_pos
    print "first vector", u
    v = c_pos - o2_pos
    print "second vector", v
    distance_co2_bohr = length(v) # output in Bohr radius units
    distance_co2 = distance_co2_bohr * 0.529177249
    print "C-O bond lenght = \n  ", distance_co2_bohr , "  Bohr\n  ", distance_co2 , "  Angstrom"
    angle_co2 = angle(u,v) * 180 / math.pi " degrees"
    print "CO2 molecule angle", angle_co2 --------------------------------------------------------------------------
An error has occurred python-side. SyntaxError: ('invalid syntax', ('<string>', 59, 53, '    angle_co2 = angle(u,v) * 180 / math.pi " degrees"\n'))


