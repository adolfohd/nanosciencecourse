# EOS and bulk modulus of fcc Aluminum
# ---------- Initialize Simulation --------------------- 

# El módulo de Young para el Aluminio debe estar por el orden de 69 () 

units metal ## bacause we are gonna work with Aluminum, a metal
dimension 3 
boundary p p p  ## los límites son periódicos en todas las tres direcciones
atom_style atomic ## define las propiedades de los átomos que hay en el material / atomic es identificador x, y y z:
atom_modify map array
variable	per equal 100

# ---------- Define simulation box ------------
lattice 	fcc 4.046 ## we define the size of the box first. Fcc es el tipo de lattice. La distancia en la que se repite la caja es 4.046
region		box block 0 1 0 1 0 1 units lattice 
    # se define la región como una caja, 
    # block dice que va de un x mínimo a un x máximo, y mínimo a y max...
    # 0 1 0 1 0 1 define las distancias entre los átomos, en unidades de lattice. sería 0 4.046 0 ... en unidades reales

# variables declaradas después de haber establecido la bucla del final
    variable dim equal lx   # buscar lx y pxx en la documentación
    variable px equal pxx

create_box	1 box ## se crea la caja
# lattice		fcc 4.046 orient x 1 0 0 orient y 0 1 0 orient z 0 0 1 
    
create_atoms 	1 box
# cómo se define el tipo de átomo? La sección de masses del archivo de entrada.
# se pone un número correspondiente al tipo de átomo
mass 1 26.981 # agregado en clase de 1 nov
# ---------- Define Interatomic Potential --------------------- 
pair_style 	eam/fs 
pair_coeff 	* * Al_mm.eam.fs Al 
# pair_coeff 1 1 Al_mm.eam.fs Al <-- agregado en clase, define los campos de fuerza entre los distintos tipos de átomo
#pair_coeff	* * Al_zhou.eam.alloy Al
#  ------ comentado en clase
# neighbor 	2.0 bin  # comentado en clase, se deja para después?
# neigh_modify 	delay 10 check yes one 30000 page 300000 
# ---------- Output ---------------------  # comentado en clase
thermo 10 
thermo_style 	custom step etotal vol epair lx pxx
# dump            1 all xyz 100 Al_expand.xyz
# dump_modify     1 element Al 
# ---------- Find equilibrium box size --------------------- 
min_style	cg # no hay necesidad del ponerlo porque es el algoritmo por defecto
# fix             2 all box/relax iso 0.0 vmax 0.001 # modificado en clase
fix 1 all box/relax iso 0.0  # el número 1 es el label del fix, se puede poner cualquier cosa
    # los fix para qué son? 
    #   No relaja los átomos sino que relaja la caja con el mínimo estrés
    #   Por cada iteración del minimize, se relaja la caja
    # cuándo se ejecutan?   Después de ... ?
    # relajación isotrópica, en todas las direcciones, 0 es completamente relajada, vmax es el paso
minimize	0 1e-6 2000 4000
    # conjugate gradient es el algoritmo por defecto
    # 0 criterio de parada
    # 1e-6 ???
    # número de pasos ...1000 para arriba
    # número de llamadas al motor de energía, cada vez que se mueve en la línea, se hace llamados al motor de energía.
    # Típicamente con dos llamadas por iteración se llega al punto mínimo

variable	dim equal lx
variable	Eequil equal etotal/count(all)
print           "Lattice constant = ${dim}, Energy = ${Eequil} kcal/mol"

# unfix		2
unfix 1 # esto "apaga" el fix que está después del minimize.
    # no poner esto haría que después de deformar la caja, esta volviera a relajarse.
#--------------- no se meciona en la clase ------------------
# variable	etkcal equal etotal*23/count(all)
# variable	etev equal etotal/count(all)
# variable 	vt equal vol/count(all)
# -----------------------------------------------------------
###################### compress box to 2% and do expansion ##############################################
# change_box      all x scale 0.95 y scale 0.95 z scale 0.95 remap units box # modificado en la clase
# change_box all x scale 0.98 remap units box 
                    # comprimir esto no es necesario, ya que sólo requerimos el módulo de Young
                    # que se puede calcular desde la relajación
    # all:      todos los átomos
    # remap:    hace que los átomos se ajusten en coordenadas internas de la caja.
# minimize        0 1e-6 5000 10000
# print           "Vol and Energy = ${vt} ${etev} ${etkcal}"
#  #---print "Length and Stress = $"
# ----------- Expand ------------------
# variable 	e loop ${per} # per = 100
variable i loop 10 # variable de controlar para ciclo
label		loop1 # etiqueta para saltar hacia atrás
# change_box 	all x scale 1.001 y scale 1.001 z scale 1.001 remap units box # cambiado en clase
change_box all x delta 0.0 0.0001  remap units box
        # delta     : ??
            # 0.0       : ??
            # 0.0001    : 
minimize 	0 1e-6 5000 1000 # 0 
        # sólo minimize para relajar los átomos dentro de la caja
        # se minimiza la energía de la caja
    # print           "Vol and Energy = ${vt}	${etev} ${etkcal}"
print "length, pressure = ${dim}, ${px}"
next		i
jump        SELF loop1
    # SELF: debido a que se puede saltar a otros archivos, se debe especificar que el salto es 
    # en este mismo archivo

    #